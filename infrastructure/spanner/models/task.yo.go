// Code generated by yo. DO NOT EDIT.
// Package models contains the types.
package models

import (
	"context"
	"fmt"
	"time"

	"cloud.google.com/go/spanner"
	"google.golang.org/api/iterator"
	"google.golang.org/grpc/codes"
)

// Task represents a row from 'Tasks'.
type Task struct {
	GoalID      string             `spanner:"GoalId" json:"GoalId"`           // GoalId
	TaskID      string             `spanner:"TaskId" json:"TaskId"`           // TaskId
	UserID      string             `spanner:"UserId" json:"UserId"`           // UserId
	Name        string             `spanner:"Name" json:"Name"`               // Name
	Description spanner.NullString `spanner:"Description" json:"Description"` // Description
	Status      string             `spanner:"Status" json:"Status"`           // Status
	CreatedAt   time.Time          `spanner:"CreatedAt" json:"CreatedAt"`     // CreatedAt
	UpdatedAt   time.Time          `spanner:"UpdatedAt" json:"UpdatedAt"`     // UpdatedAt
}

func TaskPrimaryKeys() []string {
	return []string{
		"GoalId",
		"TaskId",
	}
}

func TaskColumns() []string {
	return []string{
		"GoalId",
		"TaskId",
		"UserId",
		"Name",
		"Description",
		"Status",
		"CreatedAt",
		"UpdatedAt",
	}
}

func TaskWritableColumns() []string {
	return []string{
		"GoalId",
		"TaskId",
		"UserId",
		"Name",
		"Description",
		"Status",
		"CreatedAt",
		"UpdatedAt",
	}
}

func (t *Task) columnsToPtrs(cols []string, customPtrs map[string]interface{}) ([]interface{}, error) {
	ret := make([]interface{}, 0, len(cols))
	for _, col := range cols {
		if val, ok := customPtrs[col]; ok {
			ret = append(ret, val)
			continue
		}

		switch col {
		case "GoalId":
			ret = append(ret, &t.GoalID)
		case "TaskId":
			ret = append(ret, &t.TaskID)
		case "UserId":
			ret = append(ret, &t.UserID)
		case "Name":
			ret = append(ret, &t.Name)
		case "Description":
			ret = append(ret, &t.Description)
		case "Status":
			ret = append(ret, &t.Status)
		case "CreatedAt":
			ret = append(ret, &t.CreatedAt)
		case "UpdatedAt":
			ret = append(ret, &t.UpdatedAt)
		default:
			return nil, fmt.Errorf("unknown column: %s", col)
		}
	}
	return ret, nil
}

func (t *Task) columnsToValues(cols []string) ([]interface{}, error) {
	ret := make([]interface{}, 0, len(cols))
	for _, col := range cols {
		switch col {
		case "GoalId":
			ret = append(ret, t.GoalID)
		case "TaskId":
			ret = append(ret, t.TaskID)
		case "UserId":
			ret = append(ret, t.UserID)
		case "Name":
			ret = append(ret, t.Name)
		case "Description":
			ret = append(ret, t.Description)
		case "Status":
			ret = append(ret, t.Status)
		case "CreatedAt":
			ret = append(ret, t.CreatedAt)
		case "UpdatedAt":
			ret = append(ret, t.UpdatedAt)
		default:
			return nil, fmt.Errorf("unknown column: %s", col)
		}
	}

	return ret, nil
}

// newTask_Decoder returns a decoder which reads a row from *spanner.Row
// into Task. The decoder is not goroutine-safe. Don't use it concurrently.
func newTask_Decoder(cols []string) func(*spanner.Row) (*Task, error) {
	customPtrs := map[string]interface{}{}

	return func(row *spanner.Row) (*Task, error) {
		var t Task
		ptrs, err := t.columnsToPtrs(cols, customPtrs)
		if err != nil {
			return nil, err
		}

		if err := row.Columns(ptrs...); err != nil {
			return nil, err
		}

		return &t, nil
	}
}

// Insert returns a Mutation to insert a row into a table. If the row already
// exists, the write or transaction fails.
func (t *Task) Insert(ctx context.Context) *spanner.Mutation {
	values, _ := t.columnsToValues(TaskWritableColumns())
	return spanner.Insert("Tasks", TaskWritableColumns(), values)
}

// Update returns a Mutation to update a row in a table. If the row does not
// already exist, the write or transaction fails.
func (t *Task) Update(ctx context.Context) *spanner.Mutation {
	values, _ := t.columnsToValues(TaskWritableColumns())
	return spanner.Update("Tasks", TaskWritableColumns(), values)
}

// InsertOrUpdate returns a Mutation to insert a row into a table. If the row
// already exists, it updates it instead. Any column values not explicitly
// written are preserved.
func (t *Task) InsertOrUpdate(ctx context.Context) *spanner.Mutation {
	values, _ := t.columnsToValues(TaskWritableColumns())
	return spanner.InsertOrUpdate("Tasks", TaskWritableColumns(), values)
}

// UpdateColumns returns a Mutation to update specified columns of a row in a table.
func (t *Task) UpdateColumns(ctx context.Context, cols ...string) (*spanner.Mutation, error) {
	// add primary keys to columns to update by primary keys
	colsWithPKeys := append(cols, TaskPrimaryKeys()...)

	values, err := t.columnsToValues(colsWithPKeys)
	if err != nil {
		return nil, newErrorWithCode(codes.InvalidArgument, "Task.UpdateColumns", "Tasks", err)
	}

	return spanner.Update("Tasks", colsWithPKeys, values), nil
}

// FindTask gets a Task by primary key
func FindTask(ctx context.Context, db YORODB, goalID string, taskID string) (*Task, error) {
	key := spanner.Key{goalID, taskID}
	row, err := db.ReadRow(ctx, "Tasks", key, TaskColumns())
	if err != nil {
		return nil, newError("FindTask", "Tasks", err)
	}

	decoder := newTask_Decoder(TaskColumns())
	t, err := decoder(row)
	if err != nil {
		return nil, newErrorWithCode(codes.Internal, "FindTask", "Tasks", err)
	}

	return t, nil
}

// ReadTask retrieves multiples rows from Task by KeySet as a slice.
func ReadTask(ctx context.Context, db YORODB, keys spanner.KeySet) ([]*Task, error) {
	var res []*Task

	decoder := newTask_Decoder(TaskColumns())

	rows := db.Read(ctx, "Tasks", keys, TaskColumns())
	err := rows.Do(func(row *spanner.Row) error {
		t, err := decoder(row)
		if err != nil {
			return err
		}
		res = append(res, t)

		return nil
	})
	if err != nil {
		return nil, newErrorWithCode(codes.Internal, "ReadTask", "Tasks", err)
	}

	return res, nil
}

// Delete deletes the Task from the database.
func (t *Task) Delete(ctx context.Context) *spanner.Mutation {
	values, _ := t.columnsToValues(TaskPrimaryKeys())
	return spanner.Delete("Tasks", spanner.Key(values))
}

// FindTasksByUserIDGoalID retrieves multiple rows from 'Tasks' as a slice of Task.
//
// Generated from index 'TasksByUserIdGoalId'.
func FindTasksByUserIDGoalID(ctx context.Context, db YORODB, userID string, goalID string) ([]*Task, error) {
	const sqlstr = "SELECT " +
		"GoalId, TaskId, UserId, Name, Description, Status, CreatedAt, UpdatedAt " +
		"FROM Tasks@{FORCE_INDEX=TasksByUserIdGoalId} " +
		"WHERE UserId = @param0 AND GoalId = @param1"

	stmt := spanner.NewStatement(sqlstr)
	stmt.Params["param0"] = userID
	stmt.Params["param1"] = goalID

	decoder := newTask_Decoder(TaskColumns())

	// run query
	YOLog(ctx, sqlstr, userID, goalID)
	iter := db.Query(ctx, stmt)
	defer iter.Stop()

	// load results
	res := []*Task{}
	for {
		row, err := iter.Next()
		if err != nil {
			if err == iterator.Done {
				break
			}
			return nil, newError("FindTasksByUserIDGoalID", "Tasks", err)
		}

		t, err := decoder(row)
		if err != nil {
			return nil, newErrorWithCode(codes.Internal, "FindTasksByUserIDGoalID", "Tasks", err)
		}

		res = append(res, t)
	}

	return res, nil
}

// ReadTasksByUserIDGoalID retrieves multiples rows from 'Tasks' by KeySet as a slice.
//
// This does not retrieve all columns of 'Tasks' because an index has only columns
// used for primary key, index key and storing columns. If you need more columns, add storing
// columns or Read by primary key or Query with join.
//
// Generated from unique index 'TasksByUserIdGoalId'.
func ReadTasksByUserIDGoalID(ctx context.Context, db YORODB, keys spanner.KeySet) ([]*Task, error) {
	var res []*Task
	columns := []string{
		"GoalId",
		"TaskId",
		"UserId",
		"GoalId",
	}

	decoder := newTask_Decoder(columns)

	rows := db.ReadUsingIndex(ctx, "Tasks", "TasksByUserIdGoalId", keys, columns)
	err := rows.Do(func(row *spanner.Row) error {
		t, err := decoder(row)
		if err != nil {
			return err
		}
		res = append(res, t)

		return nil
	})
	if err != nil {
		return nil, newErrorWithCode(codes.Internal, "ReadTasksByUserIDGoalID", "Tasks", err)
	}

	return res, nil
}
